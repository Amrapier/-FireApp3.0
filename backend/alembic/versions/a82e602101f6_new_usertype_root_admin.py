"""new UserType Root Admin

Revision ID: a82e602101f6
Revises: 9e60c4a25e61
Create Date: 2021-08-23 14:58:42.415543

"""
from alembic import op
import sqlalchemy as sa
from alembic import context
import sys
sys.path = ['', '..'] + sys.path[1:]

# revision identifiers, used by Alembic.
revision = 'a82e602101f6'
down_revision = '9e60c4a25e61'
branch_labels = None
depends_on = None

name = 'user_type_enum'
tmp_name = 'tmp_' + name

old_options = ('VOLUNTEER', 'ADMIN')
new_options = sorted(old_options + ('ROOT_ADMIN',))

new_type = sa.Enum(*new_options, name=name)
old_type = sa.Enum(*old_options, name=name)

tcr = sa.sql.table('user',
                   sa.Column('role', new_type, nullable=False))

def upgrade():
    op.execute('ALTER TYPE ' + name + ' RENAME TO ' + tmp_name)

    new_type.create(op.get_bind())
    op.execute('ALTER TABLE user ALTER COLUMN role ' +
               'TYPE ' + name + ' USING status::text::' + name)
    op.execute('DROP TYPE ' + tmp_name)


def downgrade():
    # Convert 'output_limit_exceeded' status into 'timed_out'
    op.execute(tcr.update().where(tcr.c.status=='ROOT_ADMIN')
               .values(status='ADMIN'))

    op.execute('ALTER TYPE ' + name + ' RENAME TO ' + tmp_name)

    old_type.create(op.get_bind())
    op.execute('ALTER TABLE user ALTER COLUMN role ' +
               'TYPE ' + name + ' USING status::text::' + name)
    op.execute('DROP TYPE ' + tmp_name)

# # noinspection SqlResolve
# def upgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.get_context().autocommit_block():
#         op.execute("ALTER TABLE user MODIFY COLUMN role ENUM('VOLUNTEER','ADMIN', 'ROOT_ADMIN');")
#     # ### end Alembic commands ###
#
#
# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     pass
#     # ### end Alembic commands ###
